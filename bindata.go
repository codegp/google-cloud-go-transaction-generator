// Code generated by go-bindata.
// sources:
// templates/modeltemplate.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesModeltemplateGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x4d\x6f\xa3\x48\x10\x3d\x9b\x5f\x51\x6b\x29\x2b\x88\x10\xce\x61\xb5\x87\xac\x7c\x48\xd6\xbb\x2b\x6b\x27\x99\xcc\x8c\xe6\x14\x45\x23\x0c\x65\xa6\x05\xee\x26\xdd\x8d\x13\xcb\xe2\xbf\x4f\x35\x18\xd3\x76\x02\xf9\x18\xfb\x30\x07\x1b\x41\x77\x7d\xbd\xf7\xba\xaa\xf3\x30\x4a\xc3\x04\x61\xbd\x0e\x3e\x16\x3a\x2f\xf4\x4d\xfd\xa1\x2c\x1d\x87\x2d\x72\x21\x35\xb8\xce\x60\x38\x5f\xe8\xa1\x43\xcf\x28\x13\x45\x1c\x24\x42\x24\x19\x06\x91\x58\x8c\x12\x31\x8a\x43\x1d\x2a\x2d\x24\x0e\x69\x03\xf9\xb9\x12\x31\x66\x1b\x37\xd3\xca\x45\x59\x56\xc6\x89\xc8\x42\x9e\x04\x42\x26\xa3\xc7\x11\x47\x3d\x8a\x04\xd7\xf8\x48\x9e\x3d\xc7\x19\x8d\xe0\x3f\xd4\x8d\x79\x59\x82\x44\x2d\x19\x2e\x51\x41\x08\xd6\xe7\xd9\x0a\x98\x56\x30\x9d\x04\xce\xbc\xe0\x11\xb8\x11\x9c\xd2\xf2\x67\x8c\x90\x2d\x51\x96\xa5\xb7\xeb\xc7\x65\x31\x30\xae\xff\xfc\xc3\x03\xf7\x74\x2f\xbb\xb2\x0c\xda\x8d\x3e\xa0\x94\x42\x7a\xb0\x76\x06\x91\x7e\x84\xf3\x31\x6c\xf2\x0b\x2e\x69\x7b\x22\x45\xc1\x63\xd7\x73\x06\xa9\x59\xda\x16\x1d\x5c\xe3\xc3\xff\xb8\x72\xc9\xc4\x87\x61\xeb\x6e\x48\x6f\xf4\x63\xb1\x0f\x9c\x65\x64\x66\xd5\x40\xf6\xbf\xf7\xa5\xb2\x2e\x9d\x01\x9b\x9b\x7c\xaa\x2c\x82\x49\x13\xec\xef\x8c\x21\xd7\xae\x17\x50\x89\x75\xc4\xd4\xb7\xc0\xf1\xfe\xaa\x6c\x7e\x1b\x9b\x90\xa6\x8e\x01\x81\x58\x48\x6e\x5e\x7d\x20\x0e\x83\x7f\x4c\x89\x73\x77\xb8\x4d\x3f\x9e\x9d\x53\x99\x45\x16\x03\x17\x1a\x12\xd4\x96\xbb\x73\x38\x59\x0e\x2b\x58\x28\xfd\xd2\xae\x20\x98\x4e\x60\x4c\xb5\x39\x4d\x00\x1b\x46\x0a\xe6\x94\x0d\xa1\x57\x45\xa6\x59\x07\xab\x19\x53\x1a\xc4\xdc\x32\x56\x86\x5e\xfd\x1d\x99\x7c\x89\xe0\x3d\xbf\xc4\xb2\x82\xdb\xbb\x86\xe8\xdb\xbb\x03\x51\xad\xcc\xda\x22\x4c\xd1\xb8\x6c\x39\x27\xc2\x7d\xc8\x90\x9b\xb0\xde\x0e\xb7\x3b\x06\xfd\x39\x58\xf6\x73\x21\x81\x19\xb1\x18\x6b\x49\x87\x04\xc1\x14\x64\x18\x4c\xd5\x2d\xbb\x83\xf7\x08\xee\x35\x22\xaa\x60\xdc\x28\x49\xd9\x52\x52\x07\xd6\x92\xda\x17\x53\x4f\xc9\x96\x15\xd5\xde\x6a\xad\x7c\x46\x6e\xca\xd6\xdb\x45\x1c\x5b\x52\x53\x61\x2d\xb3\x84\x64\xb3\xab\xd0\x50\x29\x96\x70\xc6\x13\x6a\x25\xb4\x81\xe3\x43\xaf\xdc\x76\xdc\xba\x33\xe8\xe5\xf5\x88\x6d\x66\xca\xa9\xe3\xe6\x19\x6a\xec\xe0\xbf\xe6\x3d\xf5\xfb\x48\xbf\x29\xda\xce\x31\xf3\xb6\x12\x79\x3f\xcf\x34\x33\x7a\x7a\xc6\xac\xa6\x2f\xa5\x87\x29\x6a\xe3\x7b\x66\xb3\x36\x41\x53\xd2\x4e\x8f\x58\x88\xe7\xa9\x7b\x4d\xf7\xdf\x77\x67\x0d\x80\x0a\xf9\x63\xf5\xf7\xfe\xb3\x56\x67\xb5\x41\xbe\xf3\x6c\xbd\x02\xee\xb8\x72\xd4\x83\x78\x4b\xdf\x06\xdf\xaf\x39\xb9\xb2\xf1\x2d\xaa\x0f\xca\x34\x5a\xa0\xec\xe4\x0a\xcc\x61\x7c\x8a\x76\x37\xc6\xfb\x2e\x5f\x3e\x14\x47\x80\xde\x48\xcb\x02\xff\xdb\x1b\x64\xff\x13\xf8\xd7\xe0\xbd\x05\xff\x0f\x34\xe6\xec\x01\x51\x6f\xe8\x18\x80\x9d\x90\xef\x79\x71\x0f\x38\xe5\xde\x35\xbd\xce\xc8\xf0\xfe\x09\x5d\x9f\x0a\x94\x2b\xd7\xe6\x8a\xae\x76\x83\x14\x57\xaa\x97\x1d\x9a\x44\x17\x59\x56\x13\x74\xef\xb7\x97\x23\x33\x87\x9c\x03\xf4\xa8\x0a\xe8\xee\x61\xb4\x9d\x46\x69\x3b\x8c\x4c\xce\x9d\xd3\xa8\x69\x67\xc6\xb4\x7f\x24\x41\x85\x88\xb5\x78\xb9\xba\x91\x22\xef\xa4\xf9\xf9\xed\x6e\x4e\x7f\xd7\xe1\x02\x7d\x58\x86\x59\x81\xa0\xe8\x16\xc5\x93\x83\xcd\x9a\xe3\x2a\x20\xf8\x97\x65\x1a\xa5\x6b\x88\xfa\x92\x53\xe2\x9a\x98\x3a\x51\x30\x26\x0a\x9a\xc2\xbc\x4d\x65\xbf\x86\x5c\x28\x82\xb9\xbd\xd9\x71\x61\x3c\x86\xb3\x27\xc1\x8c\x10\x2a\x0b\x5b\x45\x67\x8d\x8a\xa8\xce\xfa\xc5\x1a\x8d\xbb\x1b\x1b\x29\xfd\x08\x00\x00\xff\xff\x32\xbe\x33\x55\xa7\x0d\x00\x00")

func templatesModeltemplateGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModeltemplateGoTmpl,
		"templates/modeltemplate.go.tmpl",
	)
}

func templatesModeltemplateGoTmpl() (*asset, error) {
	bytes, err := templatesModeltemplateGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/modeltemplate.go.tmpl", size: 3495, mode: os.FileMode(436), modTime: time.Unix(1488741827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/modeltemplate.go.tmpl": templatesModeltemplateGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"modeltemplate.go.tmpl": &bintree{templatesModeltemplateGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

