// Code generated by go-bindata.
// sources:
// templates/modeltemplate.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesModeltemplateGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x4f\x6f\x9b\x4e\x10\x3d\x9b\x4f\x31\x3f\x4b\xf9\x09\x22\x84\x73\xa8\x7a\x48\xe5\x43\x52\xb7\x95\xd5\x26\x4d\x5b\xf5\x64\x45\x15\x86\x35\x5d\x81\x77\xc9\xee\xe2\xc4\xb2\xf8\xee\x9d\xe5\x8f\x59\x9c\x80\x9d\x34\x3e\xf4\x90\x58\xc0\xce\xec\xcc\x7b\x6f\xe7\x6d\xea\x07\xb1\x1f\x11\xd8\x6c\xbc\xaf\x99\x4a\x33\x75\x53\xbe\xc8\x73\xcb\xa2\xcb\x94\x0b\x05\xb6\x35\x18\x2e\x96\x6a\x68\xe1\x6f\x90\xf0\x2c\xf4\x22\xce\xa3\x84\x78\x01\x5f\x8e\x22\x3e\x0a\x7d\xe5\x4b\xc5\x05\x19\xe2\x02\xcc\x73\xc5\x43\x92\x54\x69\xa6\x45\x8a\x3c\x2f\x82\x23\x9e\xf8\x2c\xf2\xb8\x88\x46\x0f\x23\x46\xd4\x28\xe0\x4c\x91\x07\xcc\xec\x58\xd6\x68\x04\x9f\x88\xaa\xc3\xf3\x1c\x04\x51\x82\x92\x15\x91\xe0\x83\xf1\x7a\xbe\x06\xaa\x24\x4c\x27\x9e\xb5\xc8\x58\x00\x76\x00\xa7\xf8\xf9\x3b\x09\x08\x5d\x11\x91\xe7\x4e\x3b\x8f\x4d\x43\xa0\x4c\xbd\x7d\xe3\x80\x7d\xba\x53\x5d\x9e\x7b\xcd\x42\x17\x88\x10\x5c\x38\xb0\xb1\x06\x81\x7a\x80\xf3\x31\x54\xf5\x79\x97\xb8\x3c\x12\x3c\x63\xa1\xed\x58\x83\x58\x7f\xda\x36\xed\x5d\x93\xfb\xcf\x64\x6d\x63\x88\x0b\xc3\x26\xdd\x10\x9f\xf0\x8f\x86\x2e\x30\x9a\x60\x98\xd1\x03\xc6\xff\xdf\x57\xca\x26\xb7\x06\x74\xa1\xeb\x29\xaa\xf0\x26\xf5\x66\xef\x13\x4a\x98\xb2\x1d\x0f\x5b\x2c\x77\x8c\x5d\x03\x1c\xe7\x5d\x11\xf3\xdf\x58\x6f\xa9\xfb\x18\x20\x88\x99\x60\xfa\xd1\x05\xe4\xd0\xfb\xa0\x5b\x5c\xd8\xc3\x6d\xf9\xe1\xfc\x1c\xdb\xcc\x92\x10\x18\x57\x10\x11\x65\xa4\x3b\x87\x93\xd5\xb0\x80\x05\xcb\xcf\xcd\x0e\xbc\xe9\x04\xc6\xd8\x9b\x55\x6f\x60\xc2\x88\x9b\x59\x79\x4d\xe8\x55\x96\x28\xda\xc1\x6a\x42\xa5\x02\xbe\x30\x82\xa5\xa6\x57\xfd\x26\x54\xec\x23\x78\x27\x2f\xb2\x2c\x61\x76\x5b\x13\x3d\xbb\x3d\x98\x6a\xc4\x39\x21\x4c\xc7\x3b\x30\x1e\xc3\x99\x09\xdb\x9e\x34\x9b\xaa\x59\x8d\x4d\xbf\x62\xa4\xfe\xb6\xf4\x63\xa2\x2b\x6b\xa4\x83\xba\x71\xb7\xbb\xb7\x24\xd2\x0a\xe8\x6f\xc5\x88\x5f\x70\x01\x54\x6b\x4e\x47\x0b\x3c\x6b\x04\x34\x2e\xba\xa3\x58\xce\xe8\x2d\xbc\x44\xb7\x66\x55\x65\x8e\xbd\xda\x3d\x44\xbe\x05\x81\x95\x86\xa5\x29\x62\xf9\xca\x2a\x96\xbb\x32\xee\x41\xa9\xdd\x6a\xa3\xf2\xfc\x09\xa1\x4b\x53\xe9\x17\x61\x68\x88\x5c\xfa\xa5\xc0\x23\x14\x6c\xfb\x6c\xf8\x52\xd2\x88\x51\x16\xe1\x10\xc3\x05\x8c\xdc\xf7\x0a\xbd\x95\xd6\x9e\x43\xaf\x14\x8e\x38\xe0\xa6\x0c\x67\x7d\x9a\x10\x45\x3a\x24\x53\x4a\x25\x76\xfb\x48\xbf\xc9\x9a\x99\x35\x77\xb6\x12\x79\x39\xcf\xe8\x56\x3d\xd3\x6a\x5e\xd2\x17\xe3\x8f\x6e\xaa\xca\x3d\x37\x59\x9b\x10\xdd\x52\x6b\x3a\x2d\xf9\xd3\xd4\x1d\xe2\x3b\xbb\xe9\x0c\xeb\x29\x90\x3f\x96\xb3\xf4\x9f\xb5\xb2\xaa\x0a\xf9\xce\xb3\x75\x00\xdc\x61\x91\xa8\x07\xf1\x86\xbe\x0a\xdf\x9f\x29\xa6\x32\xf1\xcd\x8a\x17\x52\x8f\x78\xc0\xea\xc4\x1a\xf4\x61\x7c\x8c\x76\x37\xc6\xbb\x29\xf7\x1f\x8a\x23\x40\xaf\xa5\x65\x80\xff\xeb\x19\xb2\xff\x0b\xfc\x4b\xf0\x9e\x83\xff\x17\x34\x58\xd3\x53\xca\x05\x1d\xd6\xdb\x09\xf9\x4e\x16\xfb\x79\xfe\xda\x8b\xfa\x8b\x0c\xef\x0c\x03\xef\x1e\xd1\xf5\x2d\x23\x62\x6d\x9b\x5c\xe1\xa5\x72\x10\x93\xb5\xec\x65\x07\x9d\xe8\x22\x49\x4a\x82\xee\xdc\xc6\xda\xb4\x0f\x59\xaf\x30\xa3\x0a\xa0\xbb\xcd\x68\xeb\x46\x71\x63\x46\xba\xe6\x4e\x37\xaa\xc7\x99\x0e\xed\xb7\x24\x28\x10\x31\x3e\x5e\xae\x6f\x04\x4f\x3b\x69\x7e\x7a\xb9\x9d\xe2\xbf\x6b\x7f\x49\x5c\x58\xf9\x49\x46\x40\xe2\xfd\x8d\x45\xaf\xe6\x35\xc7\x55\x80\xf7\x91\x26\x8a\x08\x5b\x13\xf5\x23\xc5\xc2\x15\x32\x75\x22\x61\x8c\x14\xd4\x8d\x39\x55\x67\xff\x86\x5c\xaa\xeb\xaa\xb9\xef\xa3\x6b\x6b\xb1\x59\x75\x31\x6d\x21\x3c\x3b\xab\x55\x84\x7d\x96\x0f\x86\x35\xb6\x17\xd6\x52\xfa\x13\x00\x00\xff\xff\xe0\x0d\xb4\xb7\x21\x0e\x00\x00")

func templatesModeltemplateGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModeltemplateGoTmpl,
		"templates/modeltemplate.go.tmpl",
	)
}

func templatesModeltemplateGoTmpl() (*asset, error) {
	bytes, err := templatesModeltemplateGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/modeltemplate.go.tmpl", size: 3617, mode: os.FileMode(436), modTime: time.Unix(1489374029, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/modeltemplate.go.tmpl": templatesModeltemplateGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"modeltemplate.go.tmpl": &bintree{templatesModeltemplateGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

