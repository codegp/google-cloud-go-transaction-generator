// Code generated by go-bindata.
// sources:
// templates/modeltemplate.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesModeltemplateGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x41\x6f\xdb\x3a\x0c\x3e\xc7\xbf\x82\x2f\x40\x1f\xe4\xc2\x70\x7a\x78\x78\x87\x0e\x39\xb4\xcb\x36\x04\xdb\xba\x6e\xc3\x4e\x45\x31\x38\x36\xe3\x09\x51\x24\x57\x92\xd3\x06\x81\xff\xfb\x28\x3b\x69\x94\xa4\x71\xdb\xb5\x39\xec\xd0\x06\xb6\xc8\x8f\xe4\xf7\x91\xa2\x8b\x24\x9d\x24\x39\xc2\x62\x11\x7f\x29\x6d\x51\xda\xcb\xe6\x45\x55\x05\x01\x9f\x16\x4a\x5b\x60\x41\xa7\x3b\x9e\xda\x6e\x40\xbf\xa9\x50\x65\x16\xe7\x4a\xe5\x02\xe3\x54\x4d\x7b\xb9\xea\x65\x89\x4d\x8c\x55\x1a\xbb\x64\x40\x38\x9f\x55\x86\x62\x09\x33\xac\x21\xaa\xaa\x76\xce\x95\x48\x64\x1e\x2b\x9d\xf7\xee\x7a\x12\x6d\x2f\x55\xd2\xe2\x1d\x21\x87\x41\xd0\xeb\xc1\x07\xb4\x2b\xf7\xaa\x02\x8d\x56\x73\x9c\xa1\x81\x04\xbc\xd7\xa3\x39\x70\x6b\x60\x38\x88\x83\x71\x29\x53\x60\x29\x1c\xd3\xf1\x37\x4c\x91\xcf\x50\x57\x55\xb8\x89\xc3\x78\x06\x5c\xda\xff\xff\x0b\x81\x1d\x6f\x65\x57\x55\xf1\xda\x30\x02\xd4\x5a\xe9\x10\x16\x41\x27\xb5\x77\x70\xda\x87\x65\x7e\xf1\x39\x99\xe7\x5a\x95\x32\x63\x61\xd0\x99\xb8\xa3\xfb\xa2\xe3\x0b\xbc\xfd\x88\x73\x46\x2e\x11\x74\xd7\x70\x5d\x7a\xa2\x3f\x9e\x45\x20\xb9\x20\x37\xaf\x06\xf2\xff\xb7\x2d\x95\x45\x15\x74\xf8\xd8\xe5\x53\x67\x11\x0f\x56\xc1\xde\x0a\x8e\xd2\xb2\x30\xa6\x12\x9b\x88\x93\xc8\x23\x27\x7c\x53\xfb\xfc\xd3\x77\x21\x5d\x1d\x1d\x22\xb1\xd4\xd2\x3d\x46\x40\x1a\xc6\xef\x5c\x89\x63\xd6\xbd\x4f\x3f\x1b\x9d\x52\x99\xa5\xc8\x40\x2a\x0b\x39\x5a\x0f\xee\x14\x8e\x66\xdd\x9a\x16\x4a\xbf\xf2\x2b\x88\x87\x03\xe8\x53\x6d\xc1\x2a\x80\x4f\x23\x05\x0b\xaa\x5a\xd0\xb3\x2c\xf3\xaa\x36\x49\x23\x66\x4e\x3a\x6d\x7a\x24\xc6\xf0\x5c\x72\x99\x93\xb4\x64\x20\xf1\xb6\x55\xdf\x0d\x58\x36\x82\x56\x59\x0f\x28\xfb\x50\xd2\x04\x14\x02\x2d\xee\x69\x80\x46\xf8\x49\xd4\xa6\xe4\x65\xb9\x56\x72\x14\xde\xeb\xfe\xe7\x1a\xd2\x0c\xb7\x68\x38\x6a\xa4\x9b\xd0\x8f\x2b\x6a\x89\x3d\xf2\x55\x1b\xa0\x2b\x69\x63\x12\xa7\xea\x61\xe9\x9e\x32\x8d\xdb\x70\xde\x40\xd6\xcc\x1f\x6a\xde\xda\x07\xa8\xc9\x6a\xc9\xfc\xde\xb9\x79\x02\xdd\x59\x0d\xd4\xc2\xf8\x5a\xbe\x25\xbf\x3f\x0a\x82\xf2\xf9\x2d\xeb\x17\x06\xec\x2f\x04\xca\x4e\xcf\x61\x4c\xb4\xec\xb2\xbd\x9f\xe3\x6d\xc8\xc7\x87\xe2\x00\xd4\xbb\xd6\xf2\xc8\xff\xf9\x8c\xb6\x7f\x01\xff\x0d\x79\xcf\xe1\xff\x13\x37\xde\x7e\x30\xd0\x18\xb8\xf6\x16\x74\x02\x6a\xec\x81\x99\xbd\x94\x6f\xa1\x30\xba\x67\xae\xae\x5f\xe7\xa6\xf1\x93\x23\xa3\x69\x32\xc1\xc7\xb1\x4f\xc8\xf1\x66\x47\xae\xaf\x25\xea\x39\xf3\xb5\xa2\x55\xdb\x99\xe0\xdc\xb4\xaa\x43\xeb\xe5\x4c\x88\x46\xa0\x9b\x68\xbd\xac\x28\x23\xe7\xff\xe2\x3b\xaa\x26\xda\x03\xdd\xd2\x2c\xe8\xb8\x01\xe0\xd4\x1c\x2e\x41\x4d\x1f\x0d\x08\x2e\xe7\x3a\x94\xe7\x76\xc5\xaf\x37\xaf\x33\xe7\xba\xb3\x91\x8c\x7f\xb9\x41\xcd\x88\x77\x78\x3e\xbf\xd4\xaa\xd8\x2b\xf3\xc3\xe6\xac\xa0\x7f\x17\xc9\x14\x23\x98\x25\xa2\x44\x30\xf4\xad\x22\xf3\x57\xdb\x35\x87\xed\x80\xf8\x3d\x17\x16\x35\x73\x42\x7d\x2f\x28\x71\x4b\x4a\x1d\x19\xe8\x93\x04\xab\xc2\xc2\x65\x65\x7f\x47\xbb\x50\x04\x81\x92\xf9\x71\xa1\xdf\x87\x93\x9d\x60\xae\x11\x6a\x0f\xbf\x8b\x4e\x56\x5d\x44\x75\x36\x0f\xde\x6a\xdc\x34\x5c\xb5\xd2\xef\x00\x00\x00\xff\xff\xa9\x52\x0e\x14\x37\x0b\x00\x00")

func templatesModeltemplateGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModeltemplateGoTmpl,
		"templates/modeltemplate.go.tmpl",
	)
}

func templatesModeltemplateGoTmpl() (*asset, error) {
	bytes, err := templatesModeltemplateGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/modeltemplate.go.tmpl", size: 2871, mode: os.FileMode(436), modTime: time.Unix(1476574499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/modeltemplate.go.tmpl": templatesModeltemplateGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"modeltemplate.go.tmpl": &bintree{templatesModeltemplateGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

